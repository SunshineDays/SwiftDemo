//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `Resource.bundle`.
    static let resourceBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "Resource", pathExtension: "bundle")
    
    /// `bundle.url(forResource: "Resource", withExtension: "bundle")`
    static func resourceBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.resourceBundle
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 1 images.
  struct image {
    /// Image `AppLaunchImage`.
    static let appLaunchImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "AppLaunchImage")
    
    /// `UIImage(named: "AppLaunchImage", bundle: ..., traitCollection: ...)`
    static func appLaunchImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appLaunchImage, compatibleWith: traitCollection)
    }
    
    /// This `R.image.empty` struct is generated, and contains static references to 20 images.
    struct empty {
      /// Image `avatar_100x100`.
      static let avatar_100x100 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Empty/avatar_100x100")
      /// Image `avatar_110x110`.
      static let avatar_110x110 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Empty/avatar_110x110")
      /// Image `avatar_120x120`.
      static let avatar_120x120 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Empty/avatar_120x120")
      /// Image `avatar_140x140`.
      static let avatar_140x140 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Empty/avatar_140x140")
      /// Image `avatar_160x160`.
      static let avatar_160x160 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Empty/avatar_160x160")
      /// Image `avatar_180x180`.
      static let avatar_180x180 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Empty/avatar_180x180")
      /// Image `avatar_200x200`.
      static let avatar_200x200 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Empty/avatar_200x200")
      /// Image `avatar_20x20`.
      static let avatar_20x20 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Empty/avatar_20x20")
      /// Image `avatar_220x220`.
      static let avatar_220x220 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Empty/avatar_220x220")
      /// Image `avatar_240x240`.
      static let avatar_240x240 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Empty/avatar_240x240")
      /// Image `avatar_300x300`.
      static let avatar_300x300 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Empty/avatar_300x300")
      /// Image `avatar_30x30`.
      static let avatar_30x30 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Empty/avatar_30x30")
      /// Image `avatar_400x400`.
      static let avatar_400x400 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Empty/avatar_400x400")
      /// Image `avatar_40x40`.
      static let avatar_40x40 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Empty/avatar_40x40")
      /// Image `avatar_50x50`.
      static let avatar_50x50 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Empty/avatar_50x50")
      /// Image `avatar_60x60`.
      static let avatar_60x60 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Empty/avatar_60x60")
      /// Image `avatar_70x70`.
      static let avatar_70x70 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Empty/avatar_70x70")
      /// Image `avatar_80x80`.
      static let avatar_80x80 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Empty/avatar_80x80")
      /// Image `avatar_90x90`.
      static let avatar_90x90 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Empty/avatar_90x90")
      /// Image `teamLogo`.
      static let teamLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Empty/teamLogo")
      
      /// `UIImage(named: "avatar_100x100", bundle: ..., traitCollection: ...)`
      static func avatar_100x100(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.empty.avatar_100x100, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "avatar_110x110", bundle: ..., traitCollection: ...)`
      static func avatar_110x110(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.empty.avatar_110x110, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "avatar_120x120", bundle: ..., traitCollection: ...)`
      static func avatar_120x120(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.empty.avatar_120x120, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "avatar_140x140", bundle: ..., traitCollection: ...)`
      static func avatar_140x140(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.empty.avatar_140x140, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "avatar_160x160", bundle: ..., traitCollection: ...)`
      static func avatar_160x160(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.empty.avatar_160x160, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "avatar_180x180", bundle: ..., traitCollection: ...)`
      static func avatar_180x180(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.empty.avatar_180x180, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "avatar_200x200", bundle: ..., traitCollection: ...)`
      static func avatar_200x200(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.empty.avatar_200x200, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "avatar_20x20", bundle: ..., traitCollection: ...)`
      static func avatar_20x20(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.empty.avatar_20x20, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "avatar_220x220", bundle: ..., traitCollection: ...)`
      static func avatar_220x220(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.empty.avatar_220x220, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "avatar_240x240", bundle: ..., traitCollection: ...)`
      static func avatar_240x240(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.empty.avatar_240x240, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "avatar_300x300", bundle: ..., traitCollection: ...)`
      static func avatar_300x300(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.empty.avatar_300x300, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "avatar_30x30", bundle: ..., traitCollection: ...)`
      static func avatar_30x30(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.empty.avatar_30x30, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "avatar_400x400", bundle: ..., traitCollection: ...)`
      static func avatar_400x400(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.empty.avatar_400x400, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "avatar_40x40", bundle: ..., traitCollection: ...)`
      static func avatar_40x40(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.empty.avatar_40x40, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "avatar_50x50", bundle: ..., traitCollection: ...)`
      static func avatar_50x50(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.empty.avatar_50x50, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "avatar_60x60", bundle: ..., traitCollection: ...)`
      static func avatar_60x60(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.empty.avatar_60x60, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "avatar_70x70", bundle: ..., traitCollection: ...)`
      static func avatar_70x70(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.empty.avatar_70x70, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "avatar_80x80", bundle: ..., traitCollection: ...)`
      static func avatar_80x80(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.empty.avatar_80x80, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "avatar_90x90", bundle: ..., traitCollection: ...)`
      static func avatar_90x90(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.empty.avatar_90x90, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "teamLogo", bundle: ..., traitCollection: ...)`
      static func teamLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.empty.teamLogo, compatibleWith: traitCollection)
      }
      
      fileprivate init() {}
    }
    
    /// This `R.image.forecast` struct is generated, and contains static references to 12 images.
    struct forecast {
      /// Image `bet_selected`.
      static let bet_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "Forecast/bet_selected")
      /// Image `bury_sign`.
      static let bury_sign = Rswift.ImageResource(bundle: R.hostingBundle, name: "Forecast/bury_sign")
      /// Image `bury`.
      static let bury = Rswift.ImageResource(bundle: R.hostingBundle, name: "Forecast/bury")
      /// Image `dan`.
      static let dan = Rswift.ImageResource(bundle: R.hostingBundle, name: "Forecast/dan")
      /// Image `down_default`.
      static let down_default = Rswift.ImageResource(bundle: R.hostingBundle, name: "Forecast/down_default")
      /// Image `down_selected`.
      static let down_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "Forecast/down_selected")
      /// Image `keepwin`.
      static let keepwin = Rswift.ImageResource(bundle: R.hostingBundle, name: "Forecast/keepwin")
      /// Image `result_false`.
      static let result_false = Rswift.ImageResource(bundle: R.hostingBundle, name: "Forecast/result_false")
      /// Image `result_lost`.
      static let result_lost = Rswift.ImageResource(bundle: R.hostingBundle, name: "Forecast/result_lost")
      /// Image `result_true`.
      static let result_true = Rswift.ImageResource(bundle: R.hostingBundle, name: "Forecast/result_true")
      /// Image `result_win`.
      static let result_win = Rswift.ImageResource(bundle: R.hostingBundle, name: "Forecast/result_win")
      /// Image `withdraw`.
      static let withdraw = Rswift.ImageResource(bundle: R.hostingBundle, name: "Forecast/withdraw")
      
      /// `UIImage(named: "bet_selected", bundle: ..., traitCollection: ...)`
      static func bet_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.forecast.bet_selected, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "bury", bundle: ..., traitCollection: ...)`
      static func bury(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.forecast.bury, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "bury_sign", bundle: ..., traitCollection: ...)`
      static func bury_sign(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.forecast.bury_sign, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "dan", bundle: ..., traitCollection: ...)`
      static func dan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.forecast.dan, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "down_default", bundle: ..., traitCollection: ...)`
      static func down_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.forecast.down_default, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "down_selected", bundle: ..., traitCollection: ...)`
      static func down_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.forecast.down_selected, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "keepwin", bundle: ..., traitCollection: ...)`
      static func keepwin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.forecast.keepwin, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "result_false", bundle: ..., traitCollection: ...)`
      static func result_false(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.forecast.result_false, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "result_lost", bundle: ..., traitCollection: ...)`
      static func result_lost(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.forecast.result_lost, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "result_true", bundle: ..., traitCollection: ...)`
      static func result_true(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.forecast.result_true, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "result_win", bundle: ..., traitCollection: ...)`
      static func result_win(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.forecast.result_win, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "withdraw", bundle: ..., traitCollection: ...)`
      static func withdraw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.forecast.withdraw, compatibleWith: traitCollection)
      }
      
      fileprivate init() {}
    }
    
    /// This `R.image.icon` struct is generated, and contains static references to 5 images.
    struct icon {
      /// Image `app_logo`.
      static let app_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon/app_logo")
      /// Image `left`.
      static let left = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon/left")
      /// Image `main_back`.
      static let main_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon/main_back")
      /// Image `right`.
      static let right = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon/right")
      /// Image `success`.
      static let success = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon/success")
      
      /// `UIImage(named: "app_logo", bundle: ..., traitCollection: ...)`
      static func app_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icon.app_logo, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "left", bundle: ..., traitCollection: ...)`
      static func left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icon.left, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "main_back", bundle: ..., traitCollection: ...)`
      static func main_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icon.main_back, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "right", bundle: ..., traitCollection: ...)`
      static func right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icon.right, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "success", bundle: ..., traitCollection: ...)`
      static func success(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icon.success, compatibleWith: traitCollection)
      }
      
      fileprivate init() {}
    }
    
    /// This `R.image.liao` struct is generated, and contains static references to 1 images.
    struct liao {
      /// Image `gift`.
      static let gift = Rswift.ImageResource(bundle: R.hostingBundle, name: "Liao/gift")
      
      /// `UIImage(named: "gift", bundle: ..., traitCollection: ...)`
      static func gift(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.liao.gift, compatibleWith: traitCollection)
      }
      
      fileprivate init() {}
    }
    
    /// This `R.image.navi` struct is generated, and contains static references to 1 images.
    struct navi {
      /// Image `note`.
      static let note = Rswift.ImageResource(bundle: R.hostingBundle, name: "Navi/note")
      
      /// `UIImage(named: "note", bundle: ..., traitCollection: ...)`
      static func note(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.navi.note, compatibleWith: traitCollection)
      }
      
      fileprivate init() {}
    }
    
    /// This `R.image.tabBar` struct is generated, and contains static references to 4 images.
    struct tabBar {
      /// Image `forecast_default`.
      static let forecast_default = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabBar/forecast_default")
      /// Image `forecast_selected`.
      static let forecast_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabBar/forecast_selected")
      /// Image `personal_default`.
      static let personal_default = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabBar/personal_default")
      /// Image `personal_selected`.
      static let personal_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabBar/personal_selected")
      
      /// `UIImage(named: "forecast_default", bundle: ..., traitCollection: ...)`
      static func forecast_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.tabBar.forecast_default, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "forecast_selected", bundle: ..., traitCollection: ...)`
      static func forecast_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.tabBar.forecast_selected, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "personal_default", bundle: ..., traitCollection: ...)`
      static func personal_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.tabBar.personal_default, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "personal_selected", bundle: ..., traitCollection: ...)`
      static func personal_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.tabBar.personal_selected, compatibleWith: traitCollection)
      }
      
      fileprivate init() {}
    }
    
    /// This `R.image.user` struct is generated, and contains static references to 9 images.
    struct user {
      /// Image `agreement`.
      static let agreement = Rswift.ImageResource(bundle: R.hostingBundle, name: "User/agreement")
      /// Image `arrow_right`.
      static let arrow_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "User/arrow_right")
      /// Image `avatar`.
      static let avatar = Rswift.ImageResource(bundle: R.hostingBundle, name: "User/avatar")
      /// Image `detail`.
      static let detail = Rswift.ImageResource(bundle: R.hostingBundle, name: "User/detail")
      /// Image `liao`.
      static let liao = Rswift.ImageResource(bundle: R.hostingBundle, name: "User/liao")
      /// Image `login_bg`.
      static let login_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "User/login_bg")
      /// Image `login_password`.
      static let login_password = Rswift.ImageResource(bundle: R.hostingBundle, name: "User/login_password")
      /// Image `login_user`.
      static let login_user = Rswift.ImageResource(bundle: R.hostingBundle, name: "User/login_user")
      /// Image `setting`.
      static let setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "User/setting")
      
      /// `UIImage(named: "agreement", bundle: ..., traitCollection: ...)`
      static func agreement(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.user.agreement, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "arrow_right", bundle: ..., traitCollection: ...)`
      static func arrow_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.user.arrow_right, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "avatar", bundle: ..., traitCollection: ...)`
      static func avatar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.user.avatar, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "detail", bundle: ..., traitCollection: ...)`
      static func detail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.user.detail, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "liao", bundle: ..., traitCollection: ...)`
      static func liao(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.user.liao, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "login_bg", bundle: ..., traitCollection: ...)`
      static func login_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.user.login_bg, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "login_password", bundle: ..., traitCollection: ...)`
      static func login_password(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.user.login_password, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "login_user", bundle: ..., traitCollection: ...)`
      static func login_user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.user.login_user, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "setting", bundle: ..., traitCollection: ...)`
      static func setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.user.setting, compatibleWith: traitCollection)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 3 nibs.
  struct nib {
    /// Nib `ForecastCell`.
    static let forecastCell = _R.nib._ForecastCell()
    /// Nib `ForecastDetailMatchView`.
    static let forecastDetailMatchView = _R.nib._ForecastDetailMatchView()
    /// Nib `ForecastExpertCell`.
    static let forecastExpertCell = _R.nib._ForecastExpertCell()
    
    /// `UINib(name: "ForecastCell", in: bundle)`
    static func forecastCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.forecastCell)
    }
    
    /// `UINib(name: "ForecastDetailMatchView", in: bundle)`
    static func forecastDetailMatchView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.forecastDetailMatchView)
    }
    
    /// `UINib(name: "ForecastExpertCell", in: bundle)`
    static func forecastExpertCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.forecastExpertCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 4 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `ForecastCell`.
    static let forecastCell: Rswift.ReuseIdentifier<ForecastCell> = Rswift.ReuseIdentifier(identifier: "ForecastCell")
    /// Reuse identifier `ForecastExpertCell`.
    static let forecastExpertCell: Rswift.ReuseIdentifier<ForecastExpertCell> = Rswift.ReuseIdentifier(identifier: "ForecastExpertCell")
    /// Reuse identifier `UserAgreementCell`.
    static let userAgreementCell: Rswift.ReuseIdentifier<UserAgreementCell> = Rswift.ReuseIdentifier(identifier: "UserAgreementCell")
    /// Reuse identifier `UserLiaoPayFlowCell`.
    static let userLiaoPayFlowCell: Rswift.ReuseIdentifier<UserLiaoPayFlowCell> = Rswift.ReuseIdentifier(identifier: "UserLiaoPayFlowCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 4 view controllers.
  struct segue {
    /// This struct is generated for `UserChangePasswordViewController`, and contains static references to 1 segues.
    struct userChangePasswordViewController {
      /// Segue identifier `UserChangePasswordSegue`.
      static let userChangePasswordSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, UserChangePasswordViewController, UserChangePasswordViewController2> = Rswift.StoryboardSegueIdentifier(identifier: "UserChangePasswordSegue")
      
      /// Optionally returns a typed version of segue `UserChangePasswordSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func userChangePasswordSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, UserChangePasswordViewController, UserChangePasswordViewController2>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.userChangePasswordViewController.userChangePasswordSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `UserChangePhoneViewController`, and contains static references to 1 segues.
    struct userChangePhoneViewController {
      /// Segue identifier `UserChangePhoneSegue`.
      static let userChangePhoneSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, UserChangePhoneViewController, UserChangePhoneViewController2> = Rswift.StoryboardSegueIdentifier(identifier: "UserChangePhoneSegue")
      
      /// Optionally returns a typed version of segue `UserChangePhoneSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func userChangePhoneSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, UserChangePhoneViewController, UserChangePhoneViewController2>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.userChangePhoneViewController.userChangePhoneSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `UserGetPasswordViewController`, and contains static references to 1 segues.
    struct userGetPasswordViewController {
      /// Segue identifier `UserGetPasswordSegue`.
      static let userGetPasswordSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, UserGetPasswordViewController, UserGetPasswordViewController2> = Rswift.StoryboardSegueIdentifier(identifier: "UserGetPasswordSegue")
      
      /// Optionally returns a typed version of segue `UserGetPasswordSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func userGetPasswordSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, UserGetPasswordViewController, UserGetPasswordViewController2>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.userGetPasswordViewController.userGetPasswordSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `UserRegisterThirdViewController`, and contains static references to 1 segues.
    struct userRegisterThirdViewController {
      /// Segue identifier `UserRegisterThirdNicknameSegue`.
      static let userRegisterThirdNicknameSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, UserRegisterThirdViewController, UserRegisterThirdViewController2> = Rswift.StoryboardSegueIdentifier(identifier: "UserRegisterThirdNicknameSegue")
      
      /// Optionally returns a typed version of segue `UserRegisterThirdNicknameSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func userRegisterThirdNicknameSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, UserRegisterThirdViewController, UserRegisterThirdViewController2>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.userRegisterThirdViewController.userRegisterThirdNicknameSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 10 storyboards.
  struct storyboard {
    /// Storyboard `Forecast`.
    static let forecast = _R.storyboard.forecast()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `UserAbout`.
    static let userAbout = _R.storyboard.userAbout()
    /// Storyboard `UserFeedback`.
    static let userFeedback = _R.storyboard.userFeedback()
    /// Storyboard `UserInfo`.
    static let userInfo = _R.storyboard.userInfo()
    /// Storyboard `UserLiao`.
    static let userLiao = _R.storyboard.userLiao()
    /// Storyboard `UserLogin`.
    static let userLogin = _R.storyboard.userLogin()
    /// Storyboard `UserSetting`.
    static let userSetting = _R.storyboard.userSetting()
    /// Storyboard `User`.
    static let user = _R.storyboard.user()
    
    /// `UIStoryboard(name: "Forecast", bundle: ...)`
    static func forecast(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.forecast)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "User", bundle: ...)`
    static func user(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.user)
    }
    
    /// `UIStoryboard(name: "UserAbout", bundle: ...)`
    static func userAbout(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.userAbout)
    }
    
    /// `UIStoryboard(name: "UserFeedback", bundle: ...)`
    static func userFeedback(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.userFeedback)
    }
    
    /// `UIStoryboard(name: "UserInfo", bundle: ...)`
    static func userInfo(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.userInfo)
    }
    
    /// `UIStoryboard(name: "UserLiao", bundle: ...)`
    static func userLiao(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.userLiao)
    }
    
    /// `UIStoryboard(name: "UserLogin", bundle: ...)`
    static func userLogin(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.userLogin)
    }
    
    /// `UIStoryboard(name: "UserSetting", bundle: ...)`
    static func userSetting(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.userSetting)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _ForecastCell.validate()
      try _ForecastDetailMatchView.validate()
      try _ForecastExpertCell.validate()
    }
    
    struct _ForecastCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ForecastCell
      
      let bundle = R.hostingBundle
      let identifier = "ForecastCell"
      let name = "ForecastCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ForecastCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ForecastCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Forecast/keepwin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Forecast/keepwin' is used in nib 'ForecastCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Empty/avatar_90x90", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Empty/avatar_90x90' is used in nib 'ForecastCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Forecast/withdraw", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Forecast/withdraw' is used in nib 'ForecastCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ForecastDetailMatchView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ForecastDetailMatchView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ForecastDetailMatchView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ForecastDetailMatchView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Empty/teamLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Empty/teamLogo' is used in nib 'ForecastDetailMatchView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Forecast/dan", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Forecast/dan' is used in nib 'ForecastDetailMatchView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Forecast/result_true", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Forecast/result_true' is used in nib 'ForecastDetailMatchView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Forecast/bet_selected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Forecast/bet_selected' is used in nib 'ForecastDetailMatchView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ForecastExpertCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ForecastExpertCell
      
      let bundle = R.hostingBundle
      let identifier = "ForecastExpertCell"
      let name = "ForecastExpertCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ForecastExpertCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ForecastExpertCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Forecast/result_win", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Forecast/result_win' is used in nib 'ForecastExpertCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Forecast/withdraw", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Forecast/withdraw' is used in nib 'ForecastExpertCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try userLogin.validate()
      try user.validate()
      try userLiao.validate()
      try forecast.validate()
      try userFeedback.validate()
      try userAbout.validate()
      try userSetting.validate()
      try userInfo.validate()
    }
    
    struct forecast: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let forecastController = StoryboardViewControllerResource<ForecastController>(identifier: "ForecastController")
      let forecastDetailController = StoryboardViewControllerResource<ForecastDetailController>(identifier: "ForecastDetailController")
      let forecastExpertController = StoryboardViewControllerResource<ForecastExpertController>(identifier: "ForecastExpertController")
      let name = "Forecast"
      
      func forecastController(_: Void = ()) -> ForecastController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: forecastController)
      }
      
      func forecastDetailController(_: Void = ()) -> ForecastDetailController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: forecastDetailController)
      }
      
      func forecastExpertController(_: Void = ()) -> ForecastExpertController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: forecastExpertController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Navi/note") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Navi/note' is used in storyboard 'Forecast', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Empty/avatar_80x80") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Empty/avatar_80x80' is used in storyboard 'Forecast', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Forecast/keepwin") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Forecast/keepwin' is used in storyboard 'Forecast', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Forecast/bury") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Forecast/bury' is used in storyboard 'Forecast', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Forecast/down_selected") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Forecast/down_selected' is used in storyboard 'Forecast', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Empty/avatar_100x100") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Empty/avatar_100x100' is used in storyboard 'Forecast', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Forecast/bury_sign") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Forecast/bury_sign' is used in storyboard 'Forecast', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Forecast/down_default") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Forecast/down_default' is used in storyboard 'Forecast', but couldn't be loaded.") }
        if _R.storyboard.forecast().forecastDetailController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'forecastDetailController' could not be loaded from storyboard 'Forecast' as 'ForecastDetailController'.") }
        if _R.storyboard.forecast().forecastController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'forecastController' could not be loaded from storyboard 'Forecast' as 'ForecastController'.") }
        if _R.storyboard.forecast().forecastExpertController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'forecastExpertController' could not be loaded from storyboard 'Forecast' as 'ForecastExpertController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = ViewController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      fileprivate init() {}
    }
    
    struct user: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "User"
      let userCenterViewController = StoryboardViewControllerResource<UserCenterViewController>(identifier: "UserCenterViewController")
      
      func userCenterViewController(_: Void = ()) -> UserCenterViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userCenterViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "User/detail") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'User/detail' is used in storyboard 'User', but couldn't be loaded.") }
        if UIKit.UIImage(named: "User/avatar") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'User/avatar' is used in storyboard 'User', but couldn't be loaded.") }
        if UIKit.UIImage(named: "User/arrow_right") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'User/arrow_right' is used in storyboard 'User', but couldn't be loaded.") }
        if UIKit.UIImage(named: "User/liao") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'User/liao' is used in storyboard 'User', but couldn't be loaded.") }
        if UIKit.UIImage(named: "User/setting") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'User/setting' is used in storyboard 'User', but couldn't be loaded.") }
        if _R.storyboard.user().userCenterViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userCenterViewController' could not be loaded from storyboard 'User' as 'UserCenterViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct userAbout: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UserAboutViewController
      
      let bundle = R.hostingBundle
      let name = "UserAbout"
      let userAbout = StoryboardViewControllerResource<UserAboutViewController>(identifier: "UserAbout")
      
      func userAbout(_: Void = ()) -> UserAboutViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userAbout)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "User/about-logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'User/about-logo' is used in storyboard 'UserAbout', but couldn't be loaded.") }
        if _R.storyboard.userAbout().userAbout() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userAbout' could not be loaded from storyboard 'UserAbout' as 'UserAboutViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct userFeedback: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UserFeedbackViewController
      
      let bundle = R.hostingBundle
      let name = "UserFeedback"
      let userFeedback = StoryboardViewControllerResource<UserFeedbackViewController>(identifier: "UserFeedback")
      
      func userFeedback(_: Void = ()) -> UserFeedbackViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userFeedback)
      }
      
      static func validate() throws {
        if _R.storyboard.userFeedback().userFeedback() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userFeedback' could not be loaded from storyboard 'UserFeedback' as 'UserFeedbackViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct userInfo: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "UserInfo"
      let userInfo = StoryboardViewControllerResource<UserInfoViewController>(identifier: "UserInfo")
      
      func userInfo(_: Void = ()) -> UserInfoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userInfo)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "personal_avatar_placholoder") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'personal_avatar_placholoder' is used in storyboard 'UserInfo', but couldn't be loaded.") }
        if _R.storyboard.userInfo().userInfo() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userInfo' could not be loaded from storyboard 'UserInfo' as 'UserInfoViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct userLiao: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "UserLiao"
      let userLiaoAgreementController = StoryboardViewControllerResource<UserLiaoAgreementController>(identifier: "UserLiaoAgreementController")
      let userLiaoController = StoryboardViewControllerResource<UserLiaoController>(identifier: "UserLiaoController")
      let userLiaoPayFlowController = StoryboardViewControllerResource<UserLiaoPayFlowController>(identifier: "UserLiaoPayFlowController")
      let userLiaoPaySuccessController = StoryboardViewControllerResource<UserLiaoPaySuccessController>(identifier: "UserLiaoPaySuccessController")
      
      func userLiaoAgreementController(_: Void = ()) -> UserLiaoAgreementController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userLiaoAgreementController)
      }
      
      func userLiaoController(_: Void = ()) -> UserLiaoController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userLiaoController)
      }
      
      func userLiaoPayFlowController(_: Void = ()) -> UserLiaoPayFlowController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userLiaoPayFlowController)
      }
      
      func userLiaoPaySuccessController(_: Void = ()) -> UserLiaoPaySuccessController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userLiaoPaySuccessController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "User/agreement") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'User/agreement' is used in storyboard 'UserLiao', but couldn't be loaded.") }
        if _R.storyboard.userLiao().userLiaoPaySuccessController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userLiaoPaySuccessController' could not be loaded from storyboard 'UserLiao' as 'UserLiaoPaySuccessController'.") }
        if _R.storyboard.userLiao().userLiaoController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userLiaoController' could not be loaded from storyboard 'UserLiao' as 'UserLiaoController'.") }
        if _R.storyboard.userLiao().userLiaoAgreementController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userLiaoAgreementController' could not be loaded from storyboard 'UserLiao' as 'UserLiaoAgreementController'.") }
        if _R.storyboard.userLiao().userLiaoPayFlowController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userLiaoPayFlowController' could not be loaded from storyboard 'UserLiao' as 'UserLiaoPayFlowController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct userLogin: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UserLoginViewController
      
      let bundle = R.hostingBundle
      let name = "UserLogin"
      let userAgreementViewController = StoryboardViewControllerResource<UserAgreementViewController>(identifier: "UserAgreementViewController")
      let userLogin = StoryboardViewControllerResource<UserLoginViewController>(identifier: "UserLogin")
      let userLoginAuthCodeController = StoryboardViewControllerResource<UserLoginAuthCodeController>(identifier: "UserLoginAuthCodeController")
      let userRegisterViewController = StoryboardViewControllerResource<UserRegisterViewController>(identifier: "UserRegisterViewController")
      
      func userAgreementViewController(_: Void = ()) -> UserAgreementViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userAgreementViewController)
      }
      
      func userLogin(_: Void = ()) -> UserLoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userLogin)
      }
      
      func userLoginAuthCodeController(_: Void = ()) -> UserLoginAuthCodeController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userLoginAuthCodeController)
      }
      
      func userRegisterViewController(_: Void = ()) -> UserRegisterViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userRegisterViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "User/login_user") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'User/login_user' is used in storyboard 'UserLogin', but couldn't be loaded.") }
        if UIKit.UIImage(named: "User/login_bg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'User/login_bg' is used in storyboard 'UserLogin', but couldn't be loaded.") }
        if UIKit.UIImage(named: "User/login_password") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'User/login_password' is used in storyboard 'UserLogin', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Icon/app_logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Icon/app_logo' is used in storyboard 'UserLogin', but couldn't be loaded.") }
        if UIKit.UIImage(named: "User/agreement") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'User/agreement' is used in storyboard 'UserLogin', but couldn't be loaded.") }
        if _R.storyboard.userLogin().userLogin() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userLogin' could not be loaded from storyboard 'UserLogin' as 'UserLoginViewController'.") }
        if _R.storyboard.userLogin().userAgreementViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userAgreementViewController' could not be loaded from storyboard 'UserLogin' as 'UserAgreementViewController'.") }
        if _R.storyboard.userLogin().userLoginAuthCodeController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userLoginAuthCodeController' could not be loaded from storyboard 'UserLogin' as 'UserLoginAuthCodeController'.") }
        if _R.storyboard.userLogin().userRegisterViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userRegisterViewController' could not be loaded from storyboard 'UserLogin' as 'UserRegisterViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct userSetting: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "UserSetting"
      let userDebugController = StoryboardViewControllerResource<UserDebugController>(identifier: "UserDebugController")
      let userSetting = StoryboardViewControllerResource<UserSettingViewController>(identifier: "UserSetting")
      
      func userDebugController(_: Void = ()) -> UserDebugController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userDebugController)
      }
      
      func userSetting(_: Void = ()) -> UserSettingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userSetting)
      }
      
      static func validate() throws {
        if _R.storyboard.userSetting().userSetting() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userSetting' could not be loaded from storyboard 'UserSetting' as 'UserSettingViewController'.") }
        if _R.storyboard.userSetting().userDebugController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userDebugController' could not be loaded from storyboard 'UserSetting' as 'UserDebugController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
